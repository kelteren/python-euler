"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th 
triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1,3,6,10,15,21,28,36,45,55,...

Let us list the factors of the first seven triangle numbers:
1:1
3:1,3
6:1,2,3,6
10:1,2,5,10
15:1,3,5,15
21:1,3,7,21
28:1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

# solved

import math

# triangle-function
def triangle(cardinal):
	ans = 0
	while (cardinal > 0):
		ans += cardinal
		cardinal= cardinal - 1
	return ans

# find factor,return as list
def factors(number):
	liste = []
	for i in range(1, number + 1):
	# for i in range(1, round(math.sqrt(number)) + 1):
		if number % i == 0:
			liste.append(i)
			# print(i)
	return liste

def num_factors(number):
	num_facts = 0
	for i in range(1, round(math.sqrt(number)) + 1):
		if number % i == 0:
			num_facts = num_facts + 1
	return num_facts

def get_factors(n):
    return sum(2 for i in range(1, round(math.sqrt(n)+1)) if not n % i)

num 		= 1
# threshold 	= 5
threshold 	= 500

# print(triangle(7),":",factors(triangle(7)))

while(True):

	# if(num_factors(triangle(num)) > threshold):
	if(get_factors(triangle(num)) > threshold):
		print(f"First triangle number with more than {threshold} divisors: {triangle(num)}")
		break
	else:
		num += 1

# solved